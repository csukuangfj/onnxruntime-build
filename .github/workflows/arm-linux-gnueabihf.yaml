name: arm-linux-gnueabihf

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/arm-linux-gnueabihf.yaml'

  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/arm-linux-gnueabihf.yaml'

  workflow_dispatch:
    inputs:
      version:
        description: "Version information（e.g., 1.16.1）"
        required: true

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.16.1' }}

jobs:
  arm_linux_gnueabihf:
    name: Build onnxruntime lib for arm32 on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update ONNX Runtime
        if: env.LATEST_ONNXRUNTIME_VERSION != env.CURRENT_ONNXRUNTIME_VERSION
        run: |
          echo $ONNXRUNTIME_VERSION > ONNXRUNTIME_VERSION
          git submodule update --init --depth=1 onnxruntime
          cd onnxruntime
          git fetch origin tag v$ONNXRUNTIME_VERSION
          git checkout v$ONNXRUNTIME_VERSION

      - name: cache-toolchain
        id: cache-toolchain
        uses: actions/cache@v3
        with:
          path: toolchain
          key: gcc-arm-9.2-2019.12-x86_64-arm-none-linux-gnueabihf

      - name: Download toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        shell: bash
        run: |
          git lfs install
          git clone https://huggingface.co/csukuangfj/arm-linux-gcc
          ls -lh arm-linux-gcc

          mkdir $GITHUB_WORKSPACE/toolchain
          tar xvf ./arm-linux-gcc/gcc-arm-9.2-2019.12-x86_64-arm-none-linux-gnueabihf.tar.xz --strip-components 1 -C $GITHUB_WORKSPACE/toolchain

      - name: Download protoc
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # see ./cmake/deps.txt
          if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.14.[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-linux-x86_64.zip
            unzip protoc-3.20.3-linux-x86_64.zip
          elif [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.1[56].[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip
            unzip protoc-21.12-linux-x86_64.zip
          else
            echo "Unsupported version ${{ env.ONNXRUNTIME_VERSION }}"
            exit 1
          fi

          ./bin/protoc --version

      - name: Set environment variable
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/toolchain/bin"  >> "$GITHUB_PATH"
          echo "$GITHUB_WORKSPACE/bin"  >> "$GITHUB_PATH"
          ls -lh "$GITHUB_WORKSPACE/toolchain/bin"

          echo "CC=arm-none-linux-gnueabihf-gcc" >> "$GITHUB_ENV"
          echo "CXX=arm-none-linux-gnueabihf-g++" >> "$GITHUB_ENV"

      - name: Display toolchain info
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          arm-none-linux-gnueabihf-gcc --version

      - name: Display protoc info for ${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          protoc --version

      - name: Show current directory
        shell: bash
        run: |
          ls -lh
          echo $PWD

      - name: Install dependencies
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install python3 git-lfs
          python3 -m pip install cmake
          cmake --version

      - name: Build onnxruntime for 32-bit ARM
        shell: bash
        run: |
          export CMAKE_OPTIONS="-DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_TOOLCHAIN_FILE=./arm-linux-gnueabihf.toolchain.cmake -Donnxruntime_CROSS_COMPILING=ON --compile-no-warning-as-error -Donnxruntime_BUILD_UNIT_TESTS=OFF -DONNX_CUSTOM_PROTOC_EXECUTABLE=$GITHUB_WORKSPACE/bin/protoc"
          ./build-static_lib.sh
